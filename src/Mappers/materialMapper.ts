import { CombinedMaterial, DbMaterial } from "../Types/CustomMaterial"

export const mapMaterialToDb = (material: CombinedMaterial): DbMaterial => {
    const dbObj = {
        alphaTest: material?.alphaTest,
        alphaToCoverage: material?.alphaToCoverage,
        blendDst: material?.blendDst,
        blendDstAlpha: material?.blendDstAlpha,
        blendEquation: material?.blendEquation,
        blendEquationAlpha: material?.blendEquationAlpha,
        blending: material?.blending,
        blendSrc: material?.blendSrc,
        blendSrcAlpha: material?.blendSrcAlpha,
        clipIntersection: material?.clipIntersection,
        clippingPlanes: material?.clippingPlanes,
        clipShadows: material?.clipShadows,
        colorWrite: material?.colorWrite,
        defines: JSON.stringify(material?.defines),
        depthFunc: material?.depthFunc,
        depthTest: material?.depthTest,
        depthWrite: material?.depthWrite,
        fog: material?.fog,
        format: material?.format,
        id: material?.uuid,
        stencilWrite: material?.stencilWrite,
        stencilFunc: material?.stencilFunc,
        stencilRef: material?.stencilRef,
        stencilWriteMask: material?.stencilWriteMask,
        stencilFuncMask: material?.stencilFuncMask,
        stencilFail: material?.stencilFail,
        stencilZFail: material?.stencilZFail,
        stencilZPass: material?.stencilZPass,
        name: material?.name,
        needsUpdate: material?.needsUpdate,
        opacity: material?.opacity,
        polygonOffset: material?.polygonOffset,
        polygonOffsetFactor: material?.polygonOffsetFactor,
        polygonOffsetUnits: material?.polygonOffsetUnits,
        precision: material?.precision,
        premultipliedAlpha: material?.premultipliedAlpha,
        dithering: material?.dithering,
        side: material?.side,
        shadowSide: material?.shadowSide,
        toneMapped: material?.toneMapped,
        transparent: material?.transparent,
        object_type: material?.type,
        vertexColors: material?.vertexColors,
        visible: material?.visible,
        userData: JSON.stringify(material?.userData),
        version: material?.version,
        color: material?.color?.getHexString(),
        map: material?.map,
        lightMap: material?.lightMap,
        lightMapIntensity: material?.lightMapIntensity,
        aoMap: material?.aoMap,
        aoMapIntensity: material?.aoMapIntensity,
        specularMap: material?.specularMap,
        alphaMap: material?.alphaMap,
        envMap: material?.envMap,
        combine: material?.combine,
        reflectivity: material?.reflectivity,
        refractionRatio: material?.refractionRatio,
        wireframe: material?.wireframe,
        wireframeLinewidth: material?.wireframeLinewidth,
        wireframeLinecap: material?.wireframeLinecap,
        wireframeLinejoin: material?.wireframeLinejoin,
        rotation: material?.rotation,
        sizeAttenuation: material?.sizeAttenuation,
        uniforms: material?.uniforms,
        vertexShader: material?.vertexShader,
        fragmentShader: material?.fragmentShader,
        linewidth: material?.linewidth,
        lights: material?.lights,
        clipping: material?.clipping,
        extensions: {
            derivatives: material?.extensions?.derivatives,
            fragDepth: material?.extensions?.fragDepth,
            drawBuffers: material?.extensions?.drawBuffers,
            shaderTextureLOD: material?.extensions?.shaderTextureLOD,
        },
        glslVersion: material?.glslVersion,
        size: material?.size,
        gradientMap: material?.gradientMap,
        emissive: material?.emissive,
        emissiveIntensity: material?.emissiveIntensity,
        emissiveMap: material?.emissiveMap,
        bumpMap: material?.bumpMap,
        bumpScale: material?.bumpScale,
        normalMap: material?.normalMap,
        normalMapType: material?.normalMapType,
        normalScale: material?.normalScale,
        displacementMap: material?.displacementMap,
        displacementScale: material?.displacementScale,
        displacementBias: material?.displacementBias,
        roughness: material?.roughness,
        metalness: material?.metalness,
        roughnessMap: material?.roughnessMap,
        metalnessMap: material?.metalnessMap,
        envMapIntensity: material?.envMapIntensity,
        flatShading: material?.flatShading,
        specular: material?.specular,
        shininess: material?.shininess,
        clearcoat: material?.clearcoat,
        clearcoatMap: material?.clearcoatMap,
        clearcoatRoughness: material?.clearcoatRoughness,
        clearcoatRoughnessMap: material?.clearcoatRoughnessMap,
        clearcoatNormalScale: material?.clearcoatNormalScale,
        clearcoatNormalMap: material?.clearcoatNormalMap,
        ior: material?.ior,
        sheen: material?.sheen,
        sheenRoughness: material?.sheenRoughness,
        transmission: material?.transmission,
        transmissionMap: material?.transmissionMap,
        attenuationDistance: material?.attenuationDistance,
        specularIntensity: material?.specularIntensity,
        specularIntensityMap: material?.specularIntensityMap,
        specularColorMap: material?.specularColorMap,
        matcap: material?.matcap,
        farDistance: material?.farDistance,
        nearDistance: material?.nearDistance,
        referencePosition: material?.referencePosition,
        depthPacking: material?.depthPacking,
        scale: material?.scale,
        dashSize: material?.dashSize,
        gapSize: material?.gapSize,
        linecap: material?.linecap,
        linejoin: material?.linejoin,
    }
    return {create:{...dbObj}};
}

// export const mapMaterialFromDb = (material: DbMaterial): CombinedMaterial => {

// }
